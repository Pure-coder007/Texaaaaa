<?php

namespace App\Filament\Resources\DocumentManagementResource\Pages;

use App\Filament\Resources\DocumentManagementResource;
use App\Models\ClientDocument;
use App\Models\ClientFolder;
use App\Models\User;
use Filament\Actions;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\Page;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class ListFolderDocuments extends Page implements Tables\Contracts\HasTable
{
    use Tables\Concerns\InteractsWithTable;

    protected static string $resource = DocumentManagementResource::class;

    protected static string $view = 'filament.resources.document-management-resource.pages.list-folder-documents';

    public User $client;
    public ClientFolder $folder;

    public function mount(User $client, ClientFolder $folder): void
    {
        $this->client = $client;
        $this->folder = $folder;
    }

    protected function getHeaderActions(): array
    {
        return [
            Actions\Action::make('back_to_folders')
                ->label('Back to Folders')
                ->icon('heroicon-o-arrow-left')
                ->url(DocumentManagementResource::getUrl('client-folders', ['client' => $this->client])),

            Actions\Action::make('upload_document')
                ->label('Upload Document')
                ->icon('heroicon-o-document-plus')
                ->color('primary')
                ->form([
                    TextInput::make('name')
                        ->label('Document Name')
                        ->required()
                        ->maxLength(255),

                    Select::make('document_type')
                        ->label('Document Type')
                        ->options([
                            'receipt' => 'Receipt',
                            'sales_agreement' => 'Sales Agreement',
                            'allocation_letter' => 'Allocation Letter',
                            'installment_receipt' => 'Installment Receipt',
                            'deed_of_assignment' => 'Deed of Assignment',
                            'survey_plan' => 'Survey Plan',
                            'building_plan' => 'Building Plan',
                            'approval' => 'Approval',
                            'certificate' => 'Certificate',
                            'other' => 'Other Document',
                        ])
                        ->required(),

                    FileUpload::make('document_file')
                        ->label('Document File')
                        ->acceptedFileTypes(['application/pdf', 'image/jpeg', 'image/png', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'])
                        ->maxSize(10240) // 10MB
                        ->required()
                        ->disk('public'),

                    Toggle::make('requires_client_signature')
                        ->label('Requires Client Signature')
                        ->default(false),

                    Toggle::make('requires_admin_signature')
                        ->label('Requires Admin Signature')
                        ->default(false),

                    Toggle::make('is_system_generated')
                        ->label('System Generated Document')
                        ->default(false)
                        ->helperText('Mark this if the document was automatically generated by the system'),
                ])
                ->action(function (array $data) {
                    // Create the new document
                    $document = new ClientDocument();
                    $document->client_folder_id = $this->folder->id;
                    $document->name = $data['name'];
                    $document->document_type = $data['document_type'];
                    $document->status = 'completed';
                    $document->is_system_generated = $data['is_system_generated'];
                    $document->requires_client_signature = $data['requires_client_signature'];
                    $document->requires_admin_signature = $data['requires_admin_signature'];
                    if( $data['requires_client_signature'] || $data['requires_admin_signature']) {
                        $document->status = 'pending';
                    }
                    $document->admin_uploader_id = auth()->id();
                    $document->version = '1.0';
                    $document->save();

                    // Get the uploaded file path from the data
                    $filePath = $data['document_file'];

                    // Add the file to the media collection
                    $document->addMediaFromDisk($filePath, 'public')
                        ->toMediaCollection('document_file');

                    // Notify the user
                    Notification::make()
                        ->title('Document uploaded successfully')
                        ->success()
                        ->send();

                    // Refresh the page to show the new document
                    $this->redirect(DocumentManagementResource::getUrl('folder-documents', [
                        'client' => $this->client,
                        'folder' => $this->folder
                    ]));
                }),
        ];
    }

    public function table(Table $table): Table
    {
        return $table
            ->query($this->folder->documents()->getQuery())
            ->contentGrid([
                'md' => 2,
                'lg' => 3,
            ])
            ->columns([
                Tables\Columns\Layout\Stack::make([
                    Tables\Columns\TextColumn::make('name')
                        ->searchable()
                        ->weight('bold')
                        ->size('lg')
                        ->alignCenter(),
                    Tables\Columns\TextColumn::make('document_type')
                        ->formatStateUsing(fn (string $state): string => str_replace('_', ' ', ucwords($state)))
                        ->color('gray')
                        ->alignCenter(),
                    Tables\Columns\TextColumn::make('status')
                        ->badge()
                        ->color(fn (string $state): string => match ($state) {
                            'pending' => 'warning',
                            'client_signed' => 'info',
                            'admin_signed' => 'primary',
                            'completed' => 'success',
                            'rejected' => 'danger',
                            default => 'gray',
                        })
                        ->icon(fn (string $state): string => match ($state) {
                            'pending' => 'heroicon-o-document',
                            'client_signed' => 'heroicon-o-check-circle',
                            'admin_signed' => 'heroicon-o-check-circle',
                            'completed' => 'heroicon-o-check-badge',
                            'rejected' => 'heroicon-o-x-circle',
                            default => 'heroicon-o-document',
                        })
                        ->alignCenter(),
                    Tables\Columns\TextColumn::make('created_at')
                        ->dateTime()
                        ->sortable()
                        ->alignCenter()
                        ->size('sm')
                        ->color('gray'),
                ]),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('document_type')
                    ->options([
                        'receipt' => 'Receipt',
                        'sales_agreement' => 'Sales Agreement',
                        'allocation_letter' => 'Allocation Letter',
                        'installment_receipt' => 'Installment Receipt',
                        'deed_of_assignment' => 'Deed of Assignment',
                        'survey_plan' => 'Survey Plan',
                        'building_plan' => 'Building Plan',
                        'approval' => 'Approval',
                        'certificate' => 'Certificate',
                        'other' => 'Other Document',
                    ]),
                Tables\Filters\SelectFilter::make('status')
                    ->options([
                        'pending' => 'Pending',
                        'client_signed' => 'Client Signed',
                        'admin_signed' => 'Admin Signed',
                        'completed' => 'Completed',
                        'rejected' => 'Rejected',
                    ]),
            ])
            ->actions([
                Tables\Actions\Action::make('download')
                    ->label('Download')
                    ->icon('heroicon-o-arrow-down-tray')
                    ->url(fn (ClientDocument $record): string =>
                        $record->getFirstMediaUrl('document_file')
                    )
                    ->openUrlInNewTab(),

                Tables\Actions\Action::make('admin_sign')
                    ->label('Sign as Admin')
                    ->icon('heroicon-o-pencil-square')
                    ->color('primary')
                    ->form([
                        FileUpload::make('signed_document')
                            ->acceptedFileTypes(['application/pdf', 'image/jpeg', 'image/png'])
                            ->maxSize(10240)
                            ->required()
                            ->disk('public')
                    ])
                    ->action(function (ClientDocument $record, array $data) {
                        // Clear any existing files in the collection
                        $record->clearMediaCollection('signed_document');

                        // Get the uploaded file path from the data
                        $filePath = $data['signed_document'];

                        // Add the file to the media collection
                        $record->addMediaFromDisk($filePath, 'public')
                            ->toMediaCollection('signed_document');

                        // Mark the document as signed by the admin
                        $record->admin_signed_at = now();
                        $record->admin_signer_id = auth()->id();

                        // Update status
                        if ($record->status === 'client_signed' || $record->status === 'pending') {
                            $record->status = 'admin_signed';
                        }

                        // If both signatures are present, mark as completed
                        if ($record->isFullySigned()) {
                            $record->status = 'completed';
                        }

                        $record->save();

                        // Notify the user
                        Notification::make()
                            ->title('Document signed successfully by admin')
                            ->success()
                            ->send();
                    })
                    ->visible(fn (ClientDocument $record): bool =>
                        $record->requires_admin_signature &&
                        !$record->admin_signed_at &&
                        ($record->client_signed_at || !$record->requires_client_signature)
                    ),

                Tables\Actions\Action::make('download_signed')
                    ->label('Download Signed')
                    ->icon('heroicon-o-document-check')
                    ->url(fn (ClientDocument $record): string =>
                        $record->getFirstMediaUrl('signed_document')
                    )
                    ->openUrlInNewTab()
                    ->visible(fn (ClientDocument $record): bool =>
                        ($record->client_signed_at || $record->admin_signed_at) &&
                        $record->getFirstMedia('signed_document') !== null
                    ),

                Tables\Actions\DeleteAction::make('delete')
                    ->requiresConfirmation()
                    ->visible(fn (ClientDocument $record): bool =>
                        // Only allow deletion of documents that are pending and not fully signed
                        $record->status === 'pending' && !$record->isFullySigned()
                    ),
            ])
            ->bulkActions([
                //
            ]);
    }

    public function getHeading(): string
    {
        return "Documents in {$this->folder->name}";
    }
}